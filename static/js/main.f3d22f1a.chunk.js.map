{"version":3,"sources":["App.js","index.js"],"names":["App","useState","cidade","setCidade","clima","setClima","setObtendoClima","erro","setErro","erroGeo","setErroGeo","a","process","url_clima","fetch","then","response","json","data","cod","catch","error","console","message","useEffect","api_geo","REACT_APP_API_GEO","latitude","longitude","url","log","results","components","city","country","navigator","geolocation","getCurrentPosition","position","obtemCidade","coords","code","Fragment","Navbar","bg","Brand","href","Nav","className","Link","Form","inline","FormControl","type","value","onChange","event","target","placeholder","Button","variant","onClick","obtemClima","disabled","length","Jumbotron","Alert","onClose","dismissible","Heading","codigo","texto","Toast","delay","autohide","Header","Body","Row","Card","name","main","temp","temp_min","temp_max","Img","src","weather","icon","title","description","Title","Footer","Date","dt","toLocaleString","timeZone","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f3d22f1a.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Nav from \"react-bootstrap/Nav\";\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\nimport Form from \"react-bootstrap/Form\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport Button from \"react-bootstrap/Button\";\nimport Row from \"react-bootstrap/Row\";\nimport Card from \"react-bootstrap/Card\";\nimport {\n  FaCloudversify,\n  FaCloudRain,\n  FaArrowUp,\n  FaArrowDown,\n} from \"react-icons/fa\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport Toast from \"react-bootstrap/Toast\";\nimport Alert from \"react-bootstrap/Alert\";\n\nfunction App() {\n  const [cidade, setCidade] = useState(\"\");\n  const [clima, setClima] = useState(null);\n  const [obtendoClima, setObtendoClima] = useState(false);\n  const [erro, setErro] = useState(null);\n  const [erroGeo, setErroGeo] = useState(null);\n\n  const listaErrosGeo = [\n    {\n      codigo: 1,\n      texto: \"N√£o foi dada permiss√£o para o sistema encontrar sua localiza√ß√£o\",\n    },\n    { codigo: 2, texto: \"N√£o foi poss√≠vel obter sua localiza√ß√£o\" },\n    { codigo: 3, texto: \"O tempo para obter sua localiza√ß√£o foi expirado\" },\n  ];\n\n  useEffect(() => {\n    const api_geo = process.env.REACT_APP_API_GEO;\n    if (`geolocation` in navigator) {\n      navigator.geolocation.getCurrentPosition(\n        function (position) {\n          console.log(position);\n          obtemCidade(position.coords.latitude, position.coords.longitude);\n        },\n        function (error) {\n          console.error(error);\n          setErroGeo(error.code);\n        }\n      );\n    }\n    async function obtemCidade(latitude, longitude) {\n      let url = `https://api.opencagedata;com/geocode/v1/json?q=${latitude} + ${longitude} &key=${api_geo}`;\n      await fetch(url)\n        .then((response) => response.json)\n        .then((data) => {\n          console.log(data);\n          setCidade(\n            data.results[0].components.city +\n              \", \" +\n              data.results[0].components.country\n          );\n        })\n        .catch(function (error) {\n          console.error(\n            `N√£o foi poss√≠vel buscar a cidade a partir da latitude/longitude. Erro: ${error.message}`\n          );\n        });\n    }\n  }, []);\n\n  async function obtemClima(cidade) {\n    setObtendoClima(true);\n    const api_weather = process.env.REACT_APP_API_WEATHER;\n    let url_clima = `http://api.openweathermap.org/data/2.5/weather?q=${cidade}&lang=pt&units=metric&appid=${api_weather}`;\n    await fetch(url_clima)\n      .then((response) => response.json())\n      .then((data) => {\n        switch (data.cod) {\n          case \"401\":\n            setErro(\"A API Key informada √© inv√°lida.\");\n            setClima(null);\n            break;\n\n          case \"404\":\n            setErro(\"A cidade informada n√£o existe.\");\n            setClima(null);\n            setCidade(\"\");\n            break;\n\n          case \"409\":\n            setErro(\n              \"O uso gratuito da API foi excedido (60 chamadas por minuto)\"\n            );\n            setClima(null);\n            break;\n\n          default:\n            setClima(data);\n        }\n      })\n      .catch(function (error) {\n        console.error(`Erro ao obter o clima: ${error.message}`);\n      });\n    setObtendoClima(false);\n  }\n\n  return (\n    <React.Fragment>\n      <Navbar bg=\"primary\">\n        <Navbar.Brand href=\"#inicio\">FateClima</Navbar.Brand>\n        <Nav className=\"mr-auto\">\n          <Nav.Link href=\"inicio\">In√≠cio</Nav.Link>\n          <Nav.Link href=\"contato\">Contato</Nav.Link>\n        </Nav>\n        <Form inline>\n          <FormControl\n            type=\"text\"\n            value={cidade}\n            onChange={(event) => setCidade(event.target.value)}\n            placeholder=\"Informe a cidade\"\n          />\n          &nbsp;\n          <Button\n            variant=\"secondary\"\n            onClick={() => {\n              obtemClima(cidade);\n            }}\n            disabled={cidade.length < 3}\n          >\n            <FaCloudversify />\n            Obter Clima\n          </Button>\n        </Form>\n      </Navbar>\n      <Jumbotron>\n        <h1>\n          <FaCloudRain />\n          FateClima\n        </h1>\n        <p>\n          Consulte o clima de qualquer cidade do mundo. <br></br>\n          App desenvolvido em ReactJS integrado com a API OpenWeatherMap.\n        </p>\n      </Jumbotron>\n      {erroGeo && (\n        <Alert variant=\"danger\" onClose={() => setErroGeo(null)} dismissible>\n          <Alert.Heading>\n            Ops! Ocorreu um erro ao obter sua localiza√ß√£o.\n          </Alert.Heading>\n          <p>{listaErrosGeo[erroGeo].texto}</p>\n        </Alert>\n      )}\n\n      {erro && (\n        <Toast\n          onClose={() => setErro(null)}\n          delay={4000}\n          autohide\n          className=\"bg-danger\"\n        >\n          <Toast.Header>\n            <strong className=\"mr-auto\"> {erro} </strong>\n            <small>üò¢</small>\n          </Toast.Header>\n          <Toast.Body className=\"bg-white text-danger\">\n            {\" \"}\n            Por favor, fa√ßa uma nova busca.\n          </Toast.Body>\n        </Toast>\n      )}\n\n      <Row className=\"justify-content-center\">\n        {clima && (\n          <Card bg=\"primary\" className=\"text-center\">\n            <Card.Header>\n              <h2>{clima.name}</h2>\n              <h3>{clima.main.temp}&#x2103;</h3>\n              <h5>\n                min: <strong>{clima.main.temp_min}</strong>&#x2103;\n                <FaArrowDown className=\"text/danger\" />- m√°x:{\" \"}\n                <strong>{clima.main.temp_max}</strong>&#x2103;\n                <FaArrowUp className=\"text/danger\" />\n              </h5>\n            </Card.Header>\n            <Card.Body>\n              <Card.Img\n                src={`http://openweathermap.org/img/wn/${clima.weather[0].icon}@4x.png`}\n                title={clima.weather[0].description}\n              />\n              <Card.Title className=\"text-light\">\n                {clima.weather[0].description}\n              </Card.Title>\n            </Card.Body>\n            <Card.Footer className=\"text-white\">\n              Atualizado em:{\" \"}\n              {new Date(clima.dt * 1000).toLocaleString(\"pt-BR\", {\n                timeZone: \"America/Sao_Paulo\",\n              })}\n            </Card.Footer>\n          </Card>\n        )}\n      </Row>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}